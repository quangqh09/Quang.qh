#Feel free to change up my code
import tkinter as tk
from tkinter import ttk
import time

def convert():
    try:
        result_label.config(text="")
        value = float(entry_input.get())
        from_unit = combo_from.get()
        to_unit = combo_to.get()

        if from_unit == "Feet" and to_unit == "Meter":
            converted_value = value * 0.3048
        elif from_unit == "Meter" and to_unit == "Feet":
            converted_value = value / 0.3048
        elif from_unit == "Celsius" and to_unit == "Fahrenheit":
            converted_value = (value * 9/5) + 32
        elif from_unit == "Fahrenheit" and to_unit == "Celsius":
            converted_value = (value - 32) * 5/9
        elif from_unit == "Kilogram" and to_unit == "Pound":
            converted_value = value * 2.20462
        elif from_unit == "Pound" and to_unit == "Kilogram":
            converted_value = value / 2.20462
        else:
            result_label.config(text="Units are not convertible", foreground="red")
            return

        result_label.config(text=f"Converted Value: {converted_value:.2f} {to_unit}", foreground="green")
        drop_down(result_label)
        entry_input.delete(0, tk.END)
    except ValueError:
        result_label.config(text="Invalid Input", foreground="red")

def drop_down(label):
    label.update()
    for i in range(30):
        label.place_configure(y=i)
        label.update()
        time.sleep(0.02)

def toggle_fullscreen(event=None):
    root.attributes("-fullscreen", not root.attributes("-fullscreen"))

def calculate():
    try:
        expression = entry_calculator.get()
        result = eval(expression)
        entry_calculator.delete(0, tk.END)
        entry_calculator.insert(0, str(result))
    except Exception as e:
        entry_calculator.delete(0, tk.END)
        entry_calculator.insert(0, "Error")

root = tk.Tk()
root.title("Unit Converter and Calculator")
root.geometry("800x600")
root.resizable(False, False)
root.configure(bg="#ADD8E6")

style = ttk.Style()
style.theme_use('clam')

title_label = ttk.Label(root, text="Unit Converter", font=("Helvetica", 20, "bold"), foreground="white", background="#ADD8E6")
title_label.pack(pady=10)

label_input = ttk.Label(root, text="Input Value:", foreground="white", background="#ADD8E6")
label_input.pack()
entry_input = ttk.Entry(root, width=15)
entry_input.pack(pady=5)
entry_input.focus()

units = ["Feet", "Meter", "Celsius", "Fahrenheit", "Kilogram", "Pound"]

label_from = ttk.Label(root, text="From:", foreground="white", background="#ADD8E6")
label_from.pack()
combo_from = ttk.Combobox(root, values=units, width=15)
combo_from.pack(pady=5)
combo_from.set(units[0])

label_to = ttk.Label(root, text="To:", foreground="white", background="#ADD8E6")
label_to.pack()
combo_to = ttk.Combobox(root, values=units, width=15)
combo_to.pack(pady=5)
combo_to.set(units[1])

convert_button = ttk.Button(root, text="Convert", command=convert)
convert_button.pack(pady=10)

result_label = ttk.Label(root, text="", font=("Helvetica", 12), foreground="white", background="#ADD8E6")
result_label.pack()

separator = ttk.Separator(root, orient="horizontal")
separator.pack(fill="x", pady=20)

title_label_calculator = ttk.Label(root, text="Calculator", font=("Helvetica", 20, "bold"), foreground="white", background="#ADD8E6")
title_label_calculator.pack()

calculator_frame = tk.Frame(root, bg="#ADD8E6")
calculator_frame.pack(pady=10)

entry_calculator = ttk.Entry(calculator_frame, width=40)
entry_calculator.grid(row=0, column=0, columnspan=4, padx=10, pady=5)

buttons = [
    ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("/", 1, 3),
    ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("*", 2, 3),
    ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("-", 3, 3),
    ("0", 4, 0), (".", 4, 1), ("=", 4, 2), ("+", 4, 3)
]

for (text, row, column) in buttons:
    if text == "=":
        button = ttk.Button(calculator_frame, text=text, width=10, command=calculate)
    else:
        button = ttk.Button(calculator_frame, text=text, width=10, command=lambda t=text: entry_calculator.insert(tk.END, t))
    button.grid(row=row, column=column, padx=5, pady=5)

root.bind("<F11>", toggle_fullscreen)

root.mainloop()
